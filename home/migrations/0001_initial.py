# Generated by Django 5.1.4 on 2025-02-06 13:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DSC_class',
            fields=[
                ('class_id', models.AutoField(primary_key=True, serialize=False)),
                ('class_name', models.CharField(max_length=150, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('entity_id', models.AutoField(primary_key=True, serialize=False)),
                ('entity_name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Forms',
            fields=[
                ('form_id', models.AutoField(primary_key=True, serialize=False)),
                ('form_name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='IssuingAuth',
            fields=[
                ('auth_id', models.AutoField(primary_key=True, serialize=False)),
                ('auth_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='LicensePeriod',
            fields=[
                ('license_id', models.AutoField(primary_key=True, serialize=False)),
                ('no_of_years', models.IntegerField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('platform_id', models.AutoField(primary_key=True, serialize=False)),
                ('platform_name', models.CharField(max_length=150, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Shelf',
            fields=[
                ('shelf_id', models.AutoField(primary_key=True, serialize=False)),
                ('shelf_no', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('status_id', models.AutoField(primary_key=True, serialize=False)),
                ('status_name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('type_id', models.AutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('general-user', 'General User'), ('approver', 'Approver')], default='general-user', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DSCMaster',
            fields=[
                ('dsc_id', models.AutoField(primary_key=True, serialize=False)),
                ('dsc_number', models.CharField(max_length=50, unique=True)),
                ('full_name', models.CharField(max_length=100)),
                ('issued_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('password', models.CharField(blank=True, max_length=50, null=True)),
                ('pan_no', models.CharField(blank=True, max_length=10, null=True)),
                ('email_id', models.EmailField(max_length=254)),
                ('phone_no', models.CharField(blank=True, max_length=10, null=True)),
                ('ref_name', models.CharField(blank=True, max_length=100, null=True)),
                ('ref_contact', models.CharField(blank=True, max_length=10, null=True)),
                ('type', models.CharField(choices=[('Organization', 'Organization'), ('Self', 'Self')], max_length=50)),
                ('generated_by', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Expired', 'Expired')], default='Active', max_length=50)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('dsc_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.dsc_class')),
                ('issuing_auth', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.issuingauth')),
                ('license_period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.licenseperiod')),
                ('dsc_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.type')),
            ],
        ),
        migrations.CreateModel(
            name='Docs',
            fields=[
                ('docs_id', models.AutoField(primary_key=True, serialize=False)),
                ('aadhar_path', models.FileField(upload_to='aadhar-files', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpeg', 'jpg', 'png'])])),
                ('pan_path', models.FileField(upload_to='pan-files', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpeg', 'jpg', 'png'])])),
                ('pp_path', models.FileField(upload_to='pp-files', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpeg', 'jpg', 'png'])])),
                ('dsc_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='home.dscmaster')),
            ],
        ),
        migrations.CreateModel(
            name='InOut',
            fields=[
                ('in_out_id', models.AutoField(primary_key=True, serialize=False)),
                ('direction', models.CharField(choices=[('incoming', 'Incoming'), ('outgoing', 'Outgoing')], default='outgoing', max_length=50)),
                ('requester_name', models.CharField(max_length=100)),
                ('initiation_remarks', models.TextField(blank=True, null=True)),
                ('initiation_date', models.DateField()),
                ('agent_name', models.CharField(max_length=100)),
                ('agent_mob', models.CharField(max_length=15)),
                ('action_date', models.DateField()),
                ('action_remarks', models.TextField(blank=True, null=True)),
                ('dsc_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.dscmaster', to_field='dsc_number')),
            ],
        ),
        migrations.CreateModel(
            name='DSCRenewal',
            fields=[
                ('additional_id', models.AutoField(primary_key=True, serialize=False)),
                ('gst_reg_date', models.DateField(blank=True, null=True)),
                ('it_reg_date', models.DateField(blank=True, null=True)),
                ('mca_reg_date', models.DateField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('dsc_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renewals', to='home.dscmaster')),
                ('shelf_no', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.shelf')),
            ],
        ),
        migrations.CreateModel(
            name='Usr',
            fields=[
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=50, unique=True)),
                ('role_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.roles')),
            ],
        ),
        migrations.CreateModel(
            name='UsageLogs',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('form_other', models.CharField(blank=True, max_length=50, null=True)),
                ('platform_other', models.CharField(blank=True, max_length=50, null=True)),
                ('date_of_usage', models.DateField()),
                ('dsc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.dscmaster')),
                ('form_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.forms')),
                ('platform_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.platform')),
                ('approved_by_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.usr')),
            ],
            options={
                'db_table': 'usage_logs',
            },
        ),
        migrations.CreateModel(
            name='DSCEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dsc_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dscentity_set', to='home.dscmaster')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.entity')),
            ],
            options={
                'unique_together': {('dsc_number', 'entity')},
            },
        ),
    ]
